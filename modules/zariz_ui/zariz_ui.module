<?php

/**
 * @file
 * Zariz UI.
 */

/**
 * Implements hook_menu().
 */
function zariz_ui_menu() {
  $items = array();

  $items['merge-branch/%node/%'] = array(
    'type' => MENU_CALLBACK,
    'access callback' => 'zariz_ui_merge_branch_access',
    'access arguments' => array(1, 2),
    'page callback' => 'zariz_ui_merge_branch',
    'page arguments' => array(1),
    'title' => 'Create branch',
    'description' => 'Merge a branch to its parent branch.'
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Allow creating a clone instead of editing.
 */
function zariz_ui_menu_alter(&$items) {
  // Node edit.
  $items['node/%node/edit']['page callback'] = 'zariz_ui_node_page_edit';

  // Node clone.
  $items['node/%node/clone/%clone_token']['type'] = MENU_NORMAL_ITEM;
  unset($items['node/%node/clone/%clone_token']['type']['context']);
}

/**
 * Redirect to clone form, or call the default node edit page.
 *
 * @param $node
 *   The node object.
 */
function zariz_ui_node_page_edit($node) {
  if (!zariz_is_bundle_tracked('node', $node->type)) {
    module_load_include('inc', 'node', 'node.pages');
    return node_page_edit($node);
  }

  $og_context = og_context();
  $branch_id = $og_context['gid'];

  $clone = FALSE;

  if ($branch_ids = zariz_get_branch_parents_ids($branch_id, FALSE)) {
    // Check if the content already exists in the parents, by comparing the
    // UUID.
    $wrapper = entity_metadata_wrapper('node', $node);
    $uuid = $wrapper->field_uuid->value();
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', array_keys(zariz_get_group_content_bundles()))
      ->fieldCondition('field_branch', 'target_id', $branch_ids, 'IN')
      ->fieldCondition('field_uuid', 'value', $uuid)
      ->range(0, 1)
      ->execute();

    $clone = !empty($result['node']);
  }

  if ($clone) {
    module_load_include('inc', 'clone', 'clone.pages');
    return clone_node_check($node);
  }

  module_load_include('inc', 'node', 'node.pages');
  return node_page_edit($node);
}

/**
 * Implements hook_og_permission().
 */
function zariz_ui_og_permission() {
  $items = array();
  $items['merge branch'] = array(
    'title' => t('Merge branch'),
    'description' => t('Merge a branch to its parent branch.'),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove the PURL field from the branch node form, so it will be auto
 * populated.
 */
function zariz_ui_form_branch_node_form_alter(&$form, $form_state) {
  unset($form['og_purl']);

  if (empty($form['#node']->nid)) {
    $form['#validate'][] = 'zariz_ui_branch_node_form_validate';
  }
}

/**
 * Validate handler; Make sure the branch title is unique.
 */
function zariz_ui_branch_node_form_validate($form, &$form_state) {
  $title = $form_state['values']['title'];
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'branch')
    ->propertyCondition('title', $title)
    ->range(0, 1)
    ->execute();

  if (empty($result['node'])) {
    // No duplicates.
    return;
  }

  $nid = key($result['node']);
  form_set_error('title', t('Branch !title already exists.', array('!title' => l($title, 'node/' . $nid))));
}

/**
 * Access callback; Determine if a branch can be merged.
 *
 * @param $node
 *   The branch node object.
 * @param $token
 *   A token hash, created based on the node ID.
 */
function zariz_ui_merge_branch_access($node, $token) {
  if (!drupal_valid_token($token, $node->nid)) {
    // Token isn't invalid.
    return;
  }

  if ($node->type != 'branch') {
    // Node isn't a branch.
    return;
  }

  if (!og_user_access('node', $node->nid, 'merge branch')) {
    // User doesn't have access to it.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_parent_branch->value()) {
    // Branch doesn't have a parent branch.
    return;
  }

  return TRUE;
}

/**
 * Page callback; Merge branch to its parent branch, and redirect to the parent.
 *
 * @param $node
 *   The branch node object.
 */
function zariz_ui_merge_branch($node) {
  zariz_merge_branch($node->nid);

  $wrapper = entity_metadata_wrapper('node', $node);
  $parent_id = $wrapper->field_parent_branch->getIdentifier();

  $params = array(
    '@from' => $wrapper->label(),
    '@to' => $wrapper->field_parent_branch->label(),
  );
  drupal_set_message(t('Branch @from was merged to @to.', $params));

  // Redirect to the master branch.
  $purl_params = array(
    'query' => drupal_get_query_parameters($_GET, array('q')),
    'purl' => array(
      'provider' => "og_purl|node",
      'id' => $parent_id,
    ),
  );
  unset($_GET['destination']);
  purl_goto('<front>', $purl_params);
}

/**
 * HTML preprocess.
 *
 * Add some page classes, so global page theming can adjust to the toolbar.
 */
function zariz_ui_preprocess_html(&$variables) {
  if (!zariz_ui_toolbar_access()) {
    return;
  }

  $variables['classes_array'][] = 'zariz-toolbar';

  $og_context = og_context();

  $status = zariz_get_merge_status($og_context['gid']);
  switch ($status) {
    case ZARIZ_BRANCH_IS_MERGABLE:
      $class = 'branch-unmerged';
      break;

    case ZARIZ_BRANCH_IS_MERGED:
      $class = 'branch-merged';
      break;

    case ZARIZ_BRANCH_IS_MASTER:
      $class = 'master-branch';
      break;

    case ZARIZ_BRANCH_HAS_CONFLICTS:
      $class = 'branch-conflicts';
      break;

    case ZARIZ_BRANCH_HAS_NO_CONTENT:
      $class = 'branch-no-content';
      break;
  }

  $variables['classes_array'][] = $class;
}

/**
 * Implements hook_page_build().
 *
 * Add Zariz toolbar.
 */
function zariz_ui_page_build(&$page) {
  if (strpos($_GET['q'], 'batch') === 0) {
    // Batch process.
    return;
  }

  if (strpos($_GET['q'], 'admin/') !== 0) {
    // Admin pages.
    zariz_ui_purl_redirect_by_context();
  }


  if (!$og_context = og_context()) {
    // No OG context.
    return;
  }

  if (!zariz_ui_toolbar_access()) {
    return;
  }

  if (strpos($_GET['q'], 'js/') === 0) {
    // Performance: Skip this entirely for AJAX requests.
    return;
  }

  if ($og_context['group_type'] != 'node') {
    return;
  }

  $branch_id = $og_context['gid'];
  $wrapper = entity_metadata_wrapper('node', $branch_id);

  // Show a trail from the current branch, up to it's parents, e.g. live >> dev.
  $branch_trail = array();
  if ($branch_ids = zariz_get_branch_parents_ids($branch_id, FALSE)) {
    $branch_ids = array_reverse(($branch_ids));
    foreach (node_load_multiple($branch_ids) as $parent_node) {
      $modifier = array(
        'provider' => "og_purl|node",
        'id' => $parent_node->nid,
      );

      $purl = purl_load($modifier, 'path');
      $options['purl']['disabled'] = TRUE;
      $branch_trail[] = l($parent_node->title, $purl['value'], $options);
    }
  }

  $branch_trail[] = l($wrapper->label(), '<front>');

  $items = array(implode(" &raquo; ", $branch_trail));

  $status = zariz_get_merge_status($branch_id);

  if ($parent_label = $wrapper->field_parent_branch->label()) {

    if ($status == ZARIZ_BRANCH_IS_MERGED) {
      $items[] = t('Branch Merged');
    }
    elseif ($status == ZARIZ_BRANCH_HAS_CONFLICTS) {
      $items[] = t('Merge conflicts');
    }
    elseif ($status == ZARIZ_BRANCH_HAS_NO_CONTENT) {
      $items[] = t('No content');
    }
    elseif ($status == ZARIZ_BRANCH_IS_MERGABLE && og_user_access($og_context['group_type'], $og_context['gid'], 'merge branch')) {
      // Create a merge link.
      $params = array(
        '@from_branch' => $wrapper->label(),
        '@to_branch' => $parent_label,
      );
      $token = drupal_get_token($branch_id);
      $items[] = l(t('Merge @from_branch to @to_branch', $params), "merge-branch/$branch_id/$token");
    }
  }

  if ($status <= ZARIZ_BRANCH_HAS_CONFLICTS || $status == ZARIZ_BRANCH_IS_MASTER) {
    // Create new branch.
    if (user_access('create branch content')) {
      $items[] = l(t('Create branch'), 'node/add/branch', array('html' => TRUE));
    }

    if ($status != ZARIZ_BRANCH_IS_MASTER || !variable_get('zariz_ui_deny_crud_on_master', TRUE)) {
      // Add group content links.
      foreach (zariz_get_group_content_bundles() as $bundle => $bundle_label) {
        if (!og_user_access('node', $branch_id, "create $bundle content")) {
          continue;
        }

        $items[] = l(t('Add @label', array('@label' => $bundle_label)), 'node/add/' . str_replace('_', '-', $bundle));
      }
    }
  }

  drupal_alter('zariz_ui_toolbar_links', $items, $branch_id);

  $page['page_bottom']['zariz_ui']['#markup'] = '<div id="zariz">' . theme('item_list', array('items' => $items)) . '</div>';
  $page['page_bottom']['zariz_ui']['#attached'] = array();

  $attached = &$page['page_bottom']['zariz_ui']['#attached'];
  $path = drupal_get_path('module', 'zariz_ui');
  $attached['css'][] = $path . '/css/zariz_ui.css';
}

/**
 * Determine if user has access to the Zariz toolbar.
 */
function zariz_ui_toolbar_access() {
  global $user;

  if (!$user->uid) {
    return;
  }

  if (!$og_context = og_context()) {
    return;
  }

  if ($og_context['group_type'] != 'node') {
    return;
  }

  return TRUE;
}

/**
 * Helper function; Redirect to correct PURL, by context or lack of one.
 */
function zariz_ui_purl_redirect_by_context() {
  if (!$og_context = og_context()) {
    if (!$master_nid = variable_get('zariz_master_branch')) {
      return;
    }
    $id = $master_nid;
  }
  elseif ($node = menu_get_object()) {
    if ($node->type != 'branch') {
      return;
    }

    if ($node->nid == $og_context['gid']) {
      // The viewed node, and the context are the same.
      return;
    }

    // Redirect to branch, making sure we are in the correct PURL context.
    $id = $node->nid;
  }

  if (empty($id)) {
    return;
  }

  // Redirect to the master branch.
  $purl_params = array(
    'query' => drupal_get_query_parameters($_GET, array('q')),
    'purl' => array(
      'provider' => "og_purl|node",
      'id' => $id,
    ),
  );
  unset($_GET['destination']);
  purl_goto('<front>', $purl_params);
}

