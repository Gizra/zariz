<?php

/**
 * @file
 * Contains ZarizEntityReferenceTestCase
 */

class ZarizEntityReferenceUiTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity Reference UI',
      'description' => 'Test entity reference integration with Zariz via the UI.',
      'group' => 'Zariz',
    );
  }

  function setUp() {
    // We don't depend on Zariz UI, however we enable OG purl, so can can have
    // the branch context in the URL.
    parent::setUp('zariz', 'og_purl');

    // Set the OG context, like it is done in zariz_ui_install().
    $providers = array(
      'url' => array(),
      'og_purl' => array(),
      'node' => array(),
    );

    variable_set('og_context_negotiation_group_context', $providers);

    $providers_weight = array(
      'url' => -10,
      'og_purl' => -9,
      'node' => -8,
    );

    variable_set('og_context_providers_weight_group_context', $providers_weight);

    $og_field = og_fields_info(OG_AUDIENCE_FIELD);
    $og_field['field']['cardinality'] = 1;
    og_create_field('field_branch', 'node', 'article', $og_field);

    $user1 = $this->drupalCreateUser(array('access content', 'administer group'));
    $this->drupalLogin($user1);
  }

  /**
   * Test adjusting the formatter and widget to reflect reference changes.
   */
  function testAdjustUi() {
    $live_node = zariz_create_branch('live');
    $branch_id = $live_node->nid;

    // Add a group content.
    $values = array(
      'type' => 'article',
      'title' => $this->randomName(),
    );
    $values['field_branch'][LANGUAGE_NONE][0]['target_id'] = $branch_id;
    $node1 = $this->drupalCreateNode($values);

    // Add another node, referencing the previous node.
    $values['field_zariz_node'][LANGUAGE_NONE][0]['target_id'] = $node1->nid;
    $values['title'] = $this->randomName();
    $node2 = $this->drupalCreateNode($values);

    // Create another branch.
    $dev_node = zariz_create_branch('dev', $live_node);

    // "Edit" node1 in another branch.
    unset($values['field_zariz_node']);
    $values['field_branch'][LANGUAGE_NONE][0]['target_id'] = $dev_node->nid;
    $values['field_uuid'] = $node1->field_uuid;
    $values['title'] = 'edited title';
    $node3 = $this->drupalCreateNode($values);

    // Assert formatter is updating the node according to the branch context.
    $this->drupalGet('live/node/' . $node2->nid);
    $this->assertText($node1->title);
    $this->assertNoText($node3->title);

    $this->drupalGet('dev/node/' . $node2->nid);
    $this->assertText($node3->title);
    $this->assertNoText($node1->title);

    // Assert widget is updating the node according to the branch context.
    $this->drupalGet('live/node/' . $node2->nid . '/edit');
    $this->assertOptionSelected('edit-field-zariz-node-und', $node1->nid);
    $this->assertNoText($node3->title);

    $this->drupalGet('dev/node/' . $node2->nid . '/edit');
    $this->assertOptionSelected('edit-field-zariz-node-und', $node3->nid);
    $this->assertNoText($node1->title);
  }
}
